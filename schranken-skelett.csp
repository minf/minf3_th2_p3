-- Spezifikation Schrankensystem mit Prüfungen
-- Übung TH2, WS 11/12

------------
--Datentypen 
------------ 

 nametype ZId = {0,1,2,3}  
 datatype SegId = l1|l2|r1|r2 -- links 1 und 2, rechts 1 und 2 
 datatype SigStates = r|g -- Signalzustand rot, grün 
 datatype SegState = unten|oben|senken|heben -- Segmentzustand 
 channel zug_kommt, zug_rein, zug_raus: ZId 
 channel df_anfrage, df_freigabe: ZId  -- Durchfahrt Anfrage und Freigabe 
 channel seg_senken, seg_heben, seg_unten, seg_oben: SegId

------------
--Basisprozesse
------------ 

SEGMENT ( sid, status ) = (status==oben) & seg_senken?sid -> SEGMENT( sid, senken ) []
                          (status==senken) & seg_unten.sid -> SEGMENT( sid, unten ) []
                          (status==unten) & seg_heben.sid -> SEGMENT( sid, heben ) []
                          (status==heben) & (
                                              (seg_oben.sid -> SEGMENT( sid, oben )) []
                                              (seg_senken?sid -> SEGMENT( sid, senken))
                                            )

STEUER ( ) = df_anfrage?zid -> STEUERS(zid)

STEUERS (zid) = SENKEN() ; df_freigabe.zid 
  -> zug_rein.zid -> zug_raus.zid -> HEBEN() ; STEUER( )

SENKEN ( ) = seg_senken!r1 -> seg_senken!r2 
  -> (
      (seg_unten.r1 -> seg_unten.r2 -> SENKENL()) []
      (seg_unten.r2 -> seg_unten.r1 -> SENKENL())
     ) 

SENKENL ( ) = seg_senken!l1 -> seg_senken!l2 
  -> (
      (seg_unten.l1 -> seg_unten.l2 -> SKIP) [] 
      (seg_unten.l2 -> seg_unten.l1 -> SKIP)
     )


HEBEN ( ) = seg_heben!r1 -> seg_heben!r2 -> seg_heben!l1 -> seg_heben!l2 -> SKIP

SIGNAL ( state ) =  (df_freigabe?zid -> SIGNAL( g )) []
                    (zug_raus?zid -> SIGNAL( r ))

ZUG ( zid ) = zug_kommt.zid -> df_anfrage!zid -> df_freigabe?zid -> zug_rein.zid -> zug_raus.zid -> ZUG ( zid )

------------
--Gesamtsystem
------------ 

SYS = (
        SIGNAL(r) 
          [|{| df_freigabe, zug_raus |}|]
        (
          (||| zid:ZId @ ZUG(zid))
            [|{| df_anfrage, df_freigabe, zug_rein, zug_raus |}|]
          ( STEUER() )
        )
      )
        [|{| seg_senken, seg_heben, seg_unten |}|]
      (||| sid:SegId @ SEGMENT(sid, oben)
    )

------------
--Prüfungen
------------ 

-- Zug fährt nur wenn alle Schranken unten sind

T1 =  UNTENR; UNTENL; zug_rein?zid -> zug_raus.zid -> T1
UNTENR = (seg_unten.r1 -> seg_unten.r2 -> SKIP) [] (seg_unten.r2 -> seg_unten.r1 -> SKIP)
UNTENL = (seg_unten.l1 -> seg_unten.l2 -> SKIP) [] (seg_unten.l2 -> seg_unten.l1 -> SKIP)

assert T1 [T= SYS \ {| zug_kommt, df_anfrage, df_freigabe,
                       seg_senken, seg_heben, seg_oben |}


-- Kein Zug ist dauerhaft blockiert

T2(zid) =  zug_raus.zid -> SKIP 

T3 = (T2(0) |~| T2(1) |~| T2(2) |~| T2(3)); T3
assert SYS \ {| zug_kommt, zug_rein, df_anfrage, df_freigabe, seg_senken, seg_heben, seg_oben, seg_unten |} [F= T3
--assert T3 [F= SYS \ {| zug_kommt, zug_rein, df_anfrage, df_freigabe, seg_senken, seg_heben, seg_oben, seg_unten |}


--T4(zid) = zug_kommt.zid -> WAITFG(zid)

--WAITFG(zid) = zug_kommt df_freigabe?fzid -> (fzid==zid & SKIP) [] (fzid!=zid & WAITFG(zid))

